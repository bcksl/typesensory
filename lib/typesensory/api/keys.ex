# NOTE: This file is auto generated by OpenAPI Generator 6.5.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule Typesensory.Api.Keys do
  @moduledoc """
  API calls for all endpoints tagged `Keys`.
  """

  alias Typesensory.Connection
  import Typesensory.RequestBuilder

  @doc """
  Create an API Key
  Create an API Key with fine-grain access control. You can restrict access on both a per-collection and per-action level. The generated key is returned only during creation. You want to store this key carefully in a secure place.

  ### Parameters

  - `connection` (Typesensory.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:body` (ApiKeySchema): The object that describes API key scope

  ### Returns

  - `{:ok, Typesensory.Model.ApiKey.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec create_key(Tesla.Env.client, keyword()) :: {:ok, Typesensory.Model.ApiKey.t} | {:ok, Typesensory.Model.ApiResponse.t} | {:error, Tesla.Env.t}
  def create_key(connection, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    request =
      %{}
      |> method(:post)
      |> url("/keys")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {201, %Typesensory.Model.ApiKey{}},
      {400, %Typesensory.Model.ApiResponse{}},
      {409, %Typesensory.Model.ApiResponse{}}
    ])
  end

  @doc """
  Delete an API key given its ID.

  ### Parameters

  - `connection` (Typesensory.Connection): Connection to server
  - `key_id` (integer()): The ID of the key to delete
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Typesensory.Model.ApiKey.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec delete_key(Tesla.Env.client, integer(), keyword()) :: {:ok, Typesensory.Model.ApiKey.t} | {:ok, Typesensory.Model.ApiResponse.t} | {:error, Tesla.Env.t}
  def delete_key(connection, key_id, _opts \\ []) do
    request =
      %{}
      |> method(:delete)
      |> url("/keys/#{key_id}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %Typesensory.Model.ApiKey{}},
      {400, %Typesensory.Model.ApiResponse{}},
      {404, %Typesensory.Model.ApiResponse{}}
    ])
  end

  @doc """
  Retrieve (metadata about) a key
  Retrieve (metadata about) a key. Only the key prefix is returned when you retrieve a key. Due to security reasons, only the create endpoint returns the full API key.

  ### Parameters

  - `connection` (Typesensory.Connection): Connection to server
  - `key_id` (integer()): The ID of the key to retrieve
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Typesensory.Model.ApiKey.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_key(Tesla.Env.client, integer(), keyword()) :: {:ok, Typesensory.Model.ApiKey.t} | {:ok, Typesensory.Model.ApiResponse.t} | {:error, Tesla.Env.t}
  def get_key(connection, key_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/keys/#{key_id}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %Typesensory.Model.ApiKey{}},
      {404, %Typesensory.Model.ApiResponse{}}
    ])
  end

  @doc """
  Retrieve (metadata about) all keys.

  ### Parameters

  - `connection` (Typesensory.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Typesensory.Model.ApiKeysResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_keys(Tesla.Env.client, keyword()) :: {:ok, Typesensory.Model.ApiKeysResponse.t} | {:error, Tesla.Env.t}
  def get_keys(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/keys")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %Typesensory.Model.ApiKeysResponse{}}
    ])
  end
end
