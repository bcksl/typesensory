# NOTE: This file is auto generated by OpenAPI Generator 6.5.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule Typesensory.Api.Promote do
  @moduledoc """
  API calls for all endpoints tagged `Promote`.
  """

  alias Typesensory.Connection
  import Typesensory.RequestBuilder

  @doc """
  Delete an override associated with a collection

  ### Parameters

  - `connection` (Typesensory.Connection): Connection to server
  - `collection_name` (String.t): The name of the collection
  - `override_id` (String.t): The ID of the search override to delete
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Typesensory.Model.SearchOverride.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec delete_search_override(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Typesensory.Model.ApiResponse.t} | {:ok, Typesensory.Model.SearchOverride.t} | {:error, Tesla.Env.t}
  def delete_search_override(connection, collection_name, override_id, _opts \\ []) do
    request =
      %{}
      |> method(:delete)
      |> url("/collections/#{collection_name}/overrides/#{override_id}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %Typesensory.Model.SearchOverride{}},
      {404, %Typesensory.Model.ApiResponse{}}
    ])
  end

  @doc """
  List all collection overrides

  ### Parameters

  - `connection` (Typesensory.Connection): Connection to server
  - `collection_name` (String.t): The name of the collection
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Typesensory.Model.SearchOverridesResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_search_overrides(Tesla.Env.client, String.t, keyword()) :: {:ok, Typesensory.Model.SearchOverridesResponse.t} | {:error, Tesla.Env.t}
  def get_search_overrides(connection, collection_name, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/collections/#{collection_name}/overrides")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %Typesensory.Model.SearchOverridesResponse{}}
    ])
  end

  @doc """
  Create or update an override to promote certain documents over others
  Create or update an override to promote certain documents over others. Using overrides, you can include or exclude specific documents for a given query.

  ### Parameters

  - `connection` (Typesensory.Connection): Connection to server
  - `collection_name` (String.t): The name of the collection
  - `override_id` (String.t): The ID of the search override to create/update
  - `search_override_schema` (SearchOverrideSchema): The search override object to be created/updated
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Typesensory.Model.SearchOverride.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec upsert_search_override(Tesla.Env.client, String.t, String.t, Typesensory.Model.SearchOverrideSchema.t, keyword()) :: {:ok, Typesensory.Model.ApiResponse.t} | {:ok, Typesensory.Model.SearchOverride.t} | {:error, Tesla.Env.t}
  def upsert_search_override(connection, collection_name, override_id, search_override_schema, _opts \\ []) do
    request =
      %{}
      |> method(:put)
      |> url("/collections/#{collection_name}/overrides/#{override_id}")
      |> add_param(:body, :body, search_override_schema)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %Typesensory.Model.SearchOverride{}},
      {404, %Typesensory.Model.ApiResponse{}}
    ])
  end
end
